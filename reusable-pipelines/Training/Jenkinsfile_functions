pipeline {
    agent any

    parameters{
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this a build for Release?')
    }

    environment{
        RELEASE_VERSION = '1.0.1'
        INT_VERSION = 'R2'
    }

    stages {

        stage('Audit Tools') {
            steps{
                auditTools()
            }
        }

        stage('Unit Test') {
            steps {
                dir('./java-tomcat-sample')
                sh '''
                echo "Running Unit tests"
                mvn test
                '''
            }
        }

        stage('Build') {

            environment{
                VERSION_SUFFIX = getBuildVersion()
            }

            steps {
                echo "Building version: ${INT_VERSION} with suffix: ${VERSION_SUFFIX}"
                echo "mention your application build code here"
                dir('./java-tomcat-sample') {
                    packageApplication()
                }
            }
        }

        stage('Publish') {
            // when {
            //     expression { return params.RELEASE }
            // }

            steps{
                archiveArtifacts('**/*.war')
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}

string getBuildVersion() {
    if (params.RELEASE) {
      return env.RELEASE_VERSION + ':' + env.BUILD_NUMBER }
    else {
        return env.INT_VERSION + 'ci' + env.BUILD_NUMBER
    }
}

void auditTools() {
    sh '''
    mvn -version
    java -version
    git version
    '''
}

void packageApplication() {
    sh '''
        mvn versions:set -DnewVersion="${VERSION_SUFFIX}"-SNAPSHOT
        mvn versions:update-child-modules
        mvn clean package
    '''
}
